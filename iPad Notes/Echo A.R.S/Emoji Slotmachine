Emoji Slot Machine
Clash Royale



.auto &!bank register={init}
{m?Slots:balance|{/user}} := 1000
*Thank you for registering for a bank, {/user}! You have been given `1000` gems to start out with!*



.auto &!bal={init}
DB:Slots.balance|{/user}?:{ars:ShowBalance}
Response.nil?:{ars:CheckForMention}



.auto ShowBalance={init}{arslock}
```ruby
===========
{/user}'s Balance: {r?Slots:balance|{/user}} gems
===========
```



.auto CheckForMention={init}{arslock}
String.{/user} == {self}?:*You did not start a Bank Account! You can do so by typing in `!bank register`.*
Response.nil?:*The user you have mentioned doesn't have a bank account! They must create one by typing in `!bank register`.*



.auto !pd={init}
DB:Slots.balance|{/user}?:{ars:PayDay}
Response.nil?:*You do not have a bank account! You can get one by typing in `!bank register`*



.auto PayDay={init}{arslock}
DB:Slots.pdCooldown-{/user}?:*You must wait 20 minutes before you can collect your next daily payday!*
Response.nil?:{ars:PayUser}



.auto PayUser={init}{arslock}
*Here's your daily gems, {user}! Enjoy!* ***(+1200 gems!)***
{e?Slots:balance|{/user}(+1200)}
{ars:PaydayCooldown}



.auto PaydayCooldown={init}{arslock}
{m?Slots:pdCooldown-{/user}} := 20 minutes
{ars:CooldownEnded}



.auto CooldownEnded={init}{arslock}
{sleep:20m}
{d?Slots:pdCooldown-{/user}}



.auto &!pay {params}={init}{mention:*This command requires a mention!*}
DB:Slots.balance|{self}?:{ars:CheckForBank}
Response.nil?:*<@{/rawid}>, you do not have a bank account! You must first create one by typing in `!bank register`*



.auto CheckForBank={init}{arslock}
DB:Slots.balance|{/user}?:{ars:CheckForAmount}
Response.nil?:*{/user} does not have a bank account! They must create one by doing `!bank register`*



.auto CheckForAmount={init}{arslock}
ParamRegex.(1|2|3|4|5|6|7|8|9|0)?:{ars:CheckAmount}
Response.nil?:*You must give a specified value to give!*



.auto CheckAmount={init}{arslock}
Count.{r?Slots:balance|{/user}} >= {params}?:{ars:PayWho}
Response.nil?:*You do not have enough gems to do this transaction!*




.auto PayWho={init}{arslock}
String.{/user} == {self}?:*You cannot pay yourself!*
Response.nil?:{ars:GivePay}




.auto GivePay={init}{arslock}
*<@{/rawid}>, you have given {/user} `{params}` gems!*
{e?Slots:balance-{/user}(+{params})}
{e?Slots:balance|{self}(-{params})}



.auto &!slot {params}={init}
{clean}
ParamRegex.(1|2|3|4|5|6|7|8|9|0)?:{ars:SRoll}
ContentRegex.(a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z)?:*This is invalid! Please type in `!slot #` and do not include any extra letters.!*
Response.nil?:{stop}




.auto SRoll={init}{arslock}
DB:Slots.SlotCooldown-{/user}?:*You must wait 15 seconds before you can roll again!*
Response.nil?:{ars:AllowRoll}




.auto AllowRoll={init}{arslock}
DB:Slots.balance|{self}?:{ars:Above1000}{m?Slots:SlotCooldown-{/user}} := 15 seconds
Response.nil?:*You do not have a bank account! You must first create one by typing in `!bank register`*




.auto Above1000={init}{arslock}
Count.1000 < {params}?:*The max number you can bet is `1000` gems!*
Count.20 > {params}?:*The min amount you can bet is `20` gems!*
Response.nil?:{ars:HasAmount}




.auto HasAmount={init}{arslock}
Count.{r?Slots:balance|{self}} >= {params}?:{ars:RollSlot}
Response.nil?:*You don't have enough gems to do this, <@{/rawid}>!*




.auto RollSlot={init}{arslock}
{m?Slots:ML} := {randlist::two:,:six:,🍪,:mushroom:,:cyclone:,🍀,:hearts:,:cherries:,:snowflake:}
{m?Slots:MM} := {randlist::six:,🍒,🌻,🍪,🍀,:two:,🍄,:cyclone:,:snowflake:,🌻,:hearts:}
{m?Slots:MR} := {randlist::hearts:,🍪,🍒,🍄,:two:,🌻,:six:,:snowflake:,🍀,:cyclone:}
{ars:GoSlot}




.auto GoSlot={init}{arslock}
***SLOT MACHINE***
===========
> {r?Slots:ML}{r?Slots:MM}{r?Slots:MR} <
===========
{ars:AfterRoll}




.auto AfterRoll={init}{arslock}
*Your Bid:* ***`{params}` gems***
String.{r?Slots:ML} == {r?Slots:MM}?:{ars:2-2}
String.{r?Slots:ML} == :two:?:{ars:CheckMM6}
String.{r?Slots:MM} == :two:?:{ars:CheckMR6}
String.{r?Slots:MM} == {r?Slots:MR}?:{ars:2-2}
Response.nil?:{ars:EarnedNothing}





.auto CheckMM6={init}{arslock}
String.{r?Slots:MM} == :six:?:{ars:2-6}
Response.nil?:{ars:EarnedNothing}




.auto CheckMR6={init}{arslock}
String.{r?Slots:MR} == :six:?:{ars:2-6}
Response.nil?:{ars:EarnedNothing}




.auto EarnedNothing={init}{arslock}
*<@{/rawid}>, you didn't earn anything!*
*Old Amount:* ***{r?Slots:balance|{self}} gems***
{e?Slots:balance|{self}(-{params})}
{ars:NewAmount}




.auto NewAmount={init}{arslock}
*New Amount:* ***{r?Slots:balance|{self}} gems***
{ars:DisableCooldown}




.auto 2-6={init}{arslock}
*<@{/rawid}>, 2-6! Your bid has been multiplied by 4!*
*Old Amount:* ***{r?Slots:balance-{self}} gems***
{e?Slots:balance|{self}(+{math:{params}+{params}+{params}+{params}})}
{ars:NewAmount}




.auto DisableCooldown={init}{arslock}
{sleep:15s}
{d?Slots:SlotCooldown-{/user}}




.auto 2-2={init}{arslock}
String.{r?Slots:MM} == :two:?:{ars:CheckFor6}
Response.nil?:{ars:Continue2-2}




.auto Continue2-2={init}{arslock}
*<@{/rawid}>, two consecutive symbols! Your bid has been multiplied by 2!*
*Old Amount:* ***{r?Slots:balance-{self}} gems***
{e?Slots:balance|{self}(+{math:{params}+{params}})}
{ars:NewAmount}




.auto CheckFor6={init}{arslock}
String.{r?Slots:MR} == :six:?:{ars:Jackpot}
Response.nil?:{ars:Continue2-2}




.auto Jackpot={init}{arslock}
*Congratulations, <@{/rawid}>!!! You have hit the jackpot! Your bid has been multiplied by 3000!!!*
*Old Amount:* ***{r?Slots:balance-{/user}} gems***
{e?Slots:balance|{/user}(+{math:{params}*3000})}
{ars:NewAmount}




.auto !end={init}
use | 271873926945177602
{if(isuser):
{d?Slots:SlotCooldown-{/user}}
{d?Slots:pdCooldown-{self}}
*Your cooldown(s) has been removed, {user}!*
}
